#include <stdio.h>

#define MAX_VAL 9999

void insert(int num, int arr[], int *p_hsize);

int del_root(int arr[], int *p_hsize);

void restoreUp(int arr[], int loc);

void restoreDown(int arr[], int i, int size);

void display(int arr[],int hsize);

int main( )

{

int arr[100]; /*array used to represent heap*/

int hsize=0; /*Number of nodes in the heap*/

int i,choice,num;

arr[0]= MAX_VAL;

while(1)

{

printf("<<<.....MAIN MENU.....>>>\n");

printf("\n1.INSERT\n");

printf("2.DELETE ROOT\n");

printf("3.DISPLAY\n");

printf("4.EXIT\n");

printf("\nENTER YOUR CHOICE : ");

scanf("%d",&choice);

switch(choice)

{

case 1:

printf("\nEnter the number to be inserted : ");

scanf("%d",&num);

insert(num,arr,&hsize);

break;

case 2:

if(hsize==0)

printf("\nHeap is empty \n");

else

{

num = del_root(arr,&hsize);

printf("\nMaximum element is %d\n", num);

}

break;

case 3:

display(arr,hsize);

break;

case 4:

exit(1);

default:

printf("\nWrong choice\n");

}/*End of switch */

}/*End of while */

}/*End of main( )*/

void insert(int num, int arr[], int *p_hsize )

{

(*p_hsize)++; /*Increase the heap size by 1*/

arr[*p_hsize]=num;

restoreUp(arr, *p_hsize);

}/*End of insert( )*/

void restoreUp(int arr[], int i)

{

int k = arr[i];

int par = i/2;

/* while( par>=1 && arr[par] < num )*/ /*if MAX_VAL not in arr[0]*/

while( arr[par] < k )

{

arr[i]=arr[par];

i = par;

par = i/2;

}

arr[i] = k;

}/*End of restoreUp()*/

int del_root(int arr[], int *p_hsize)

{

int max = arr[1]; /* Save the element present at the root*/

arr[1] = arr[*p_hsize];/* Place the last element in the root */

(*p_hsize)--; /* Decrease the heap size by 1 */

restoreDown(arr,1,*p_hsize);

return max;

}/*End of del_root()*/

void restoreDown(int arr[], int i, int hsize )

{

int lchild=2*i, rchild=lchild+1;

int num=arr[i];

while( rchild <= hsize )

{

if( num>=arr[lchild] && num>=arr[rchild] )

{

arr[i] = num;

return;

}

else if(arr[lchild] > arr[rchild])

{

arr[i] = arr[lchild];

i = lchild;

}

else

{

arr[i] = arr[rchild];

i = rchild;

}

lchild = 2 * i;

rchild = lchild + 1;

}

/*If number of nodes is even*/

if(lchild == hsize && num < arr[lchild] )

{

arr[i]=arr[lchild];

i = lchild;

}

arr[i]=num;

}/*End of restoreDown()*/

void display(int arr[],int hsize)

{

int i;

if(hsize==0)

{

printf("\nHeap is empty\n");

return;

}

for(i=1;i<=hsize;i++)

printf("%d ",arr[i]);

printf("\n");

printf("\nNumber of elements = %d\n",hsize);

}/*End of display( )*/
